@typeparam TItem
<div style=@Style>
    @if (Data != null)
    {
        int count = 0;
        int total = Data.Count();
        int columns = total % 10;
        List<List<TItem>> subLists = CreateSublists(10);

        <table class="table">
            <thead>
            </thead>
            <tbody>
                @foreach (var list in subLists)
                {
                    <tr>
                        @foreach(var item in list)
                        {
                            var Text = TextField?.Invoke(item);
                            var Value = ValueField?.Invoke(item).ToString();
                            bool Checked = false;
                            if (SelectedValues.Contains(Value))
                            {
                                Checked = true;
                            }
                            count++;
                            <td>
                                <input type="checkbox" checked=@Checked
                                       @onchange="eventArgs => { CheckboxClicked(Value, eventArgs.Value); }" />
                                @Text <br />
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    @ChildContent
</div>

@code {
    //Data for the Checkbox
    [Parameter] public IEnumerable<TItem> Data { get; set; }
    // The field to be shown adjacent to checkbox
    [Parameter] public Func<TItem, string> TextField { get; set; }
    // The Value which checkbox will return when checked
    [Parameter] public Func<TItem, object> ValueField { get; set; }
    // CSS Style for the Checkbox container
    [Parameter] public string Style { get; set; }
    // Any childd content for the control (if needed)
    [Parameter] public RenderFragment ChildContent { get; set; }
    // The array which contains the list of selected checkboxs
    [Parameter] public List<string> SelectedValues { get; set; }

    //Method to update the selected value on click on checkbox
    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }

    public List<List<TItem>> CreateSublists(int size)
    {
        return Data
            .Select((x, i) => new { Index = i, Value = x })
            .GroupBy(x => x.Index / size)
            .Select(x => x.Select(v => v.Value).ToList())
            .ToList();
    }
}