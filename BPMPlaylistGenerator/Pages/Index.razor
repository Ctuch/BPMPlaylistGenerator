@page "/"
@using SpotifyAPI.Web
@using System
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject NavigationManager navManager

<h1>BPM Playlist Generator</h1>

<p>This tool generates playlists based on songs recommended for you.
    Simply select up to five genres, and enter a maximum and minimum BPM for your playlist</p>

<p>

</p>

<p>
    I want songs between:
    <input @bind="minBPMInput" />
    and
    <input @bind="maxBPMInput" />
    BPM (valid range is 0 to 500).
</p>

@if (_isAuthed && _me != null)
{
    <h2>Welcome @_me.DisplayName!</h2>
    <p>
        You have a grant total of @_totalPlaylistCount playlists!
        Here are all the genres on spotify:
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">CheckBox List :</label>
            <CheckBoxList Data="@_genres"
                          TextField="@((item)=>item)"
                          ValueField="@((item)=>item)"
                          SelectedValues="@_selectedGenres" />
        </div>
    </p>
}
else
{
    <span>To get started:</span>
    <a href="@_authUri">
        Login via Spotify
    </a>
}

@code {
    private bool _isAuthed = false;

    private PrivateUser _me;

    private int? _totalPlaylistCount;

    private Uri _authUri;

    private List<string> _genres;

    private List<string> _selectedGenres;

    private string? minBPMInput;

    private string? maxBPMInput;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Configuration["SPOTIFY_CLIENT_ID"]))
        {
            var baseUri = navManager.ToAbsoluteUri(navManager.BaseUri);

            var loginRequest = new LoginRequest(baseUri, Configuration["SPOTIFY_CLIENT_ID"], LoginRequest.ResponseType.Token)
            {
                Scope = new[] { Scopes.PlaylistReadPrivate, Scopes.PlaylistReadCollaborative }
            };
            _authUri = loginRequest.ToUri();

            _selectedGenres = new List<string>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        var maxLen = Math.Min(1, uri.Fragment.Length);
        Dictionary<string, string> fragmentParams = uri.Fragment.Substring(maxLen)?
          .Split("&", StringSplitOptions.RemoveEmptyEntries)?
          .Select(param => param.Split("=", StringSplitOptions.RemoveEmptyEntries))?
          .ToDictionary(param => param[0], param => param[1]) ?? new Dictionary<string, string>();

        Console.WriteLine(fragmentParams);

        _isAuthed = fragmentParams.ContainsKey("access_token");
        if (_isAuthed)
        {
            var spotify = new SpotifyClient(fragmentParams["access_token"]);

            _me = await spotify.UserProfile.Current();
            _totalPlaylistCount = (await spotify.Playlists.CurrentUsers()).Total;

            var availableGenres = await spotify.Browse.GetRecommendationGenres();
            _genres = availableGenres.Genres;

            if (Int32.TryParse(minBPMInput, out int minBPM) && Int32.TryParse(maxBPMInput, out int maxBPM))
            {
                RecommendationsRequest recRequest = new RecommendationsRequest();
                recRequest.Limit = 100;

                Dictionary<string, string> maxPairs = new Dictionary<string, string>();
                maxPairs.Add("tempo", maxBPMInput);
                Dictionary<string, string> minPairs = new Dictionary<string, string>();
                minPairs.Add("tempo", minBPMInput);
                spotify.Browse.GetRecommendations(limit: 100);
                var recommendations = await spotify.Browse.GetRecommendations();
            }
            else
            {
                Console.WriteLine("String could not be parsed, cannot create playlist");
            }
        }
    }
}